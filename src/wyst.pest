WHITESPACE = _{ ("//" ~ (!"\n" ~ ANY)*) | ("/*" ~ (!"*/" ~ ANY)*) | " " | "\t" | "\n" }

// [chars]
comma = {","}
semicolon = {";"}
dot = {"."}

// [literals]
filepath = { ("/"|('a'..'z' | 'a'..'z' | '0'..'9' | "_" | "-" | "."))+ }
include = { "#" ~ "include" ~ "\"" ~ filepath ~ "\"" }
include_global = { "#" ~ "include" ~ "<" ~ filepath ~ ">" }
round = { "(" ~ ((expr ~ comma)* ~ expr?) ~ ")" }
curly = { "{" ~ (code_expr)* ~ "}" }
escape = { "\\" ~ ANY }
raw_string = { (!("\\" | "\"") ~ ANY)+ }
string = { "\"" ~ (raw_string | escape )* ~ "\"" }
char = { "'" ~ (escape | ANY) ~ "'" }
bool = @{"true" | "false"}
keyword = @{"struct"|"return"}
map = { "#" ~ "map" ~ identifier ~ comma ~ identifier }
match_name = { "<match:" ~ identifier ~ ":" ~ identifier ~ ">" }

// [numbers]
hex = @{ "0" ~ ("x"|"X") ~ ('0'..'9' | 'a'..'f' | 'A'..'F')*}
float = @{ ('0'..'9')* ~ "." ~ ('0'..'9')+ }
int = @{ '0'..'9'+ }

// [identifiers]
identifier = @{ !(hex|float|int) ~ ("." | "::" | "_" | 'a'..'z' | 'A'..'Z') ~ ( "." | "::" | "_" | 'a'..'z' | 'A'..'Z' | int )*}
def_identifier = {identifier ~ ("<" ~ ((def_identifier ~ comma)* ~ def_identifier?) ~ ">")?}

// [definitions]
round_def = { "(" ~ ((var_def ~ comma)* ~ var_def?) ~ ")" }
curly_def = { "{" ~ (var_def ~ semicolon)* ~ "}" }
var_def = { (def_identifier ~ identifier) | var_def_ptr }
var_def_ptr = { def_identifier ~ "*" ~ identifier }
var_def_set = { var_def ~ "=" ~ expr }
var_set = { def_identifier ~ "=" ~ expr }
func_def = { def_identifier ~ identifier ~ round_def ~ curly }
struct_def = { "struct" ~ identifier ~ curly_def }
ecall = { identifier ~ ( "(" ~ ((def_identifier ~ comma)* ~ def_identifier?) ~ ")" )? }
ecurly = { "{" ~ ((ecall ~ comma)* ~ ecall?) ~ "}" }
enum_def = { "enum" ~ identifier ~ ecurly }
top_code = {"{"~ top_expr ~"}"}
namespace_def = {"namespace" ~ identifier ~ top_code}
impl_def = {"impl" ~ identifier ~ top_code}

// [Ptr]
ptr_fn_def = { def_identifier ~ "*" ~ identifier ~ round_def ~ curly }
ptr_set = { "*" ~ identifier ~ "=" ~ expr }
refrence = { "&" ~ identifier }

// [Operators]
if_operator = {"&&"|"||"}
operator = {"=="|"+"|"-"|"!="|">"|"<"|">="|"<="}
if_expr = {expr ~ (if_operator ~ (("("~if_expr*~")")|expr))*}
operation = {(term ~ operator)+ ~ term}

// [Statement]
return_stm = { "return" ~ expr }
if_stm = { "if" ~ if_expr ~ curly }
else_if_stm = { "else" ~ "if" ~ if_expr ~ curly }
else_stm = { "else" ~ curly }

rust_macro_lint = { "macro_rules" ~ "!" ~ identifier }
rust_code = { (rust_macro_lint | ANY)* }

call = {identifier ~ round}

term = {
    call |
    round |
    char |
    hex |
    float |
    int |
    bool |
    identifier |
    string |
    refrence |
    match_name
}

expr = {
    operation |
    (term ~ dot ~ identifier ~ round?) |
    term
}

code_expr = {
    ((
        return_stm |
        var_def_set|
        var_def |
        var_set |
        ptr_set |
        expr
    ) ~ semicolon) | 
    if_stm |
    else_if_stm |
    else_stm
}

top_expr = {
    (
        func_def |
        namespace_def |
        include |
        include_global |
        ptr_fn_def |
        struct_def |
        enum_def |
        map |
        impl_def |
        match_name
    )*
}

header_expr = {
  map*
}
